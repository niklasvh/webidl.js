var fs = require('fs');
var Parser = require("../lib/webidl.js");

//var tests = ["// This is an IDL code block.\ninterface Example {\n  attribute long something;\n};","exception GraphicsException {\n  DOMString reason;\n};\n\ninterface Paint { };\n\ninterface SolidColor : Paint {\n  attribute float red;\n  attribute float green;\n  attribute float blue;\n};\n\ninterface Pattern : Paint {\n  attribute DOMString imageURL;\n};\n\n[Constructor]\ninterface GraphicalWindow {\n  readonly attribute unsigned long width;\n  readonly attribute unsigned long height;\n\n  attribute Paint currentPaint;\n\n  void drawRectangle(float x, float y, float width, float height);\n\n  void drawText(float x, float y, DOMString text);\n};","interface B : A {\n  void f(ArrayOfLongs x);\n};\n\ninterface A {\n};\n\ntypedef long[] ArrayOfLongs;","// Typedef identifier: \"number\"\ntypedef float number;\n\n// Exception identifier: \"FrameworkException\"\nexception FrameworkException {\n\n  // Constant identifier: \"ERR_NOT_FOUND\"\n  const long ERR_NOT_FOUND = 1;\n\n  // Exception field identifier: \"code\"\n  long code;\n};\n\n// Interface identifier: \"System\"\ninterface System {\n\n  // Operation identifier:          \"createObject\"\n  // Operation argument identifier: \"interface\"\n  object createObject(DOMString _interface);\n\n  // Operation argument identifier: \"interface\"\n  object[] createObjectArray(DOMString interface);\n\n  // Operation has no identifier; it declares a getter.\n  getter DOMString (DOMString keyName);\n};\n\n// Interface identifier: \"TextField\"\ninterface TextField {\n\n  // Attribute identifier: \"const\"\n  attribute boolean _const;\n\n  // Attribute identifier: \"value\"\n  attribute DOMString? _value;\n};","interface A {\n  void f();\n  void g();\n};\n\ninterface B : A {\n  void f();\n  void g(DOMString x);\n};","callback interface Options {\n  attribute DOMString? option1;\n  attribute DOMString? option2;\n  attribute long? option3;\n};\n\ninterface A {\n  void doTask(DOMString type, Options options);\n};","dictionary Options {\n  DOMString? option1;\n  DOMString? option2;\n  long? option3;\n};\n\ninterface A {\n  void doTask(DOMString type, Options options);\n};","interface Animal {\n  attribute DOMString name;\n};\n\ninterface Human : Animal {\n  attribute Dog? pet;\n};\n\ninterface Dog : Animal {\n  attribute Human? owner;\n};","interface Node {\n  readonly attribute DOMString nodeName;\n  readonly attribute Node? parentNode;\n  Node appendChild(Node newChild);\n  void addEventListener(DOMString type, EventListener listener);\n};\n\ncallback interface EventListener {\n  void handleEvent(Event event);\n};","interface A {\n  const short rambaldi = 47;\n};","interface Util {\n  const boolean DEBUG = false;\n  const octet LF = 10;\n  const unsigned long BIT_MASK = 0x0000fc00;\n  const float AVOGADRO = 6.022e23;\n};\n\nexception Problem {\n  const short ERR_UNKNOWN = 0;\n  const short ERR_OUT_OF_MEMORY = 1;\n\n  short errorCode;\n};","interface Animal {\n\n  // A simple attribute that can be set to any string value.\n  readonly attribute DOMString name;\n\n  // An attribute whose value can be assigned to.\n  attribute unsigned short age;\n};\n\ninterface Person : Animal {\n\n  // An attribute whose getter behavior is inherited from Animal, and need not be\n  // specified in the description of Person.\n  inherit attribute DOMString name;\n};","interface Dimensions {\n  attribute unsigned long width;\n  attribute unsigned long height;\n};\n\nexception NoPointerDevice { };\n\ninterface Button {\n\n  // An operation that takes no arguments and returns a boolean.\n  boolean isMouseOver();\n\n  // Overloaded operations.\n  void setDimensions(Dimensions size);\n  void setDimensions(unsigned long width, unsigned long height);\n};","interface IntegerSet {\n  readonly attribute unsigned long cardinality;\n\n  void union(long... ints);\n  void intersection(long... ints);\n};","interface ColorCreator {\n  object createColor(float v1, float v2, float v3, optional float alpha);\n};","interface ColorCreator {\n  object createColor(float v1, float v2, float v3);\n  object createColor(float v1, float v2, float v3, float alpha);\n};","interface Dictionary {\n  readonly attribute unsigned long propertyCount;\n\n  getter float (DOMString propertyName);\n  setter void (DOMString propertyName, float propertyValue);\n};","interface Dictionary {\n  readonly attribute unsigned long propertyCount;\n\n  getter float getProperty(DOMString propertyName);\n  setter void setProperty(DOMString propertyName, float propertyValue);\n};","interface Dictionary {\n  readonly attribute unsigned long propertyCount;\n\n  float getProperty(DOMString propertyName);\n  void setProperty(DOMString propertyName, float propertyValue);\n\n  getter float (DOMString propertyName);\n  setter void (DOMString propertyName, float propertyValue);\n};","interface NumberQuadrupler {\n  // This operation simply returns four times the given number x.\n  legacycaller float compute(float x);\n};","interface A {\n  stringifier DOMString ();\n};","interface A {\n  stringifier;\n};","[Constructor]\ninterface Student {\n  attribute unsigned long id;\n  stringifier attribute DOMString name;\n};","[Constructor]\ninterface Student {\n  attribute unsigned long id;\n  attribute DOMString? familyName;\n  attribute DOMString givenName;\n\n  stringifier DOMString ();\n};","interface A {\n  getter DOMString toWord(unsigned long index);\n};","interface OrderedMap {\n  readonly attribute unsigned long size;\n\n  getter any getByIndex(unsigned long index);\n  setter void setByIndex(unsigned long index, any value);\n  deleter void removeByIndex(unsigned long index);\n\n  getter any get(DOMString name);\n  setter creator void set(DOMString name, any value);\n  deleter void remove(DOMString name);\n};","interface Point { /* ... */ };\n\ninterface Circle {\n  attribute float cx;\n  attribute float cy;\n  attribute float radius;\n\n  static Point triangulate(Circle c1, Circle c2, Circle c3);\n};","interface A {\n  void f();\n};\n\npartial interface A {\n  void f(float x);\n  void g();\n};\n\npartial interface A {\n  void g(DOMString x);\n};","interface A {\n  /* f1 */ void f(DOMString a);\n  /* f2 */ void f(Node a, DOMString b, float... c);\n  /* f3 */ void f();\n  /* f4 */ void f(Event a, DOMString b, optional DOMString c, float... d);\n};","interface B {\n  void f(DOMString x);\n  void f(float x);\n};","interface B {\n  /* f1 */ void f(DOMString w);\n  /* f2 */ void f(long w, float x, Node y, Node z);\n  /* f3 */ void f(float w, float x, DOMString y, Node z);\n};","dictionary B : A {\n  long b;\n  long a;\n};\n\ndictionary A {\n  long c;\n  long g;\n};\n\ndictionary C : B {\n  long e;\n  long f;\n};\n\npartial dictionary A {\n  long h;\n  long d;\n};","interface Something {\n  void f(A a);\n};","[Constructor]\ninterface Point {\n  attribute float x;\n  attribute float y;\n};\n\ndictionary PaintOptions {\n  DOMString? fillPattern = \"black\";\n  DOMString? strokePattern = null;\n  Point position;\n};\n\ninterface GraphicsContext {\n  void drawRectangle(float width, float height, optional PaintOptions options);\n};","exception DOMException {\n  const unsigned short INDEX_SIZE_ERR = 1;\n  const unsigned short DOMSTRING_SIZE_ERR = 2;\n  const unsigned short HIERARCHY_REQUEST_ERR = 3;\n\n  unsigned short code;\n};","enum MealType { \"rice\", \"noodles\", \"other\" };\n\ninterface Meal {\n  attribute MealType type;\n  attribute float size;     // in grams\n\n  void initialize(MealType type, float size);\n};","callback AsyncOperationCallback = void (DOMString status);\n\ninterface AsyncOperations {\n  void performOperation(AsyncOperationCallback whenFinished);\n};","typedef [Clamp] octet Value;\n\ninterface A {\n  void setColor(Value r, Value g, Value b);\n};","interface A {\n  void setColor([Clamp] octet r, [Clamp] octet g, [Clamp] octet b);\n};","interface A {\n  Value getRedComponent();\n  void setRedComponent([EnforceRange] Value r);\n};","interface Point {\n  attribute float x;\n  attribute float y;\n};\n\ntypedef sequence<Point> Points;\n\ninterface Widget {\n  boolean pointWithinBounds(Point p);\n  boolean allPointsWithinBounds(Points ps);\n};","interface Window { ... };\ninterface SomeFunctionality { ... };\nWindow implements SomeFunctionality;","interface Gizmo { ... };\ninterface MoreFunctionality { ... };\nSomeFunctionality implements MoreFunctionality;\nGizmo implements SomeFunctionality;","interface Gizmo { ... };\ninterface MoreFunctionality { ... };\nGizmo implements SomeFunctionality;\nGizmo implements MoreFunctionality;","interface A { attribute long x; };\ninterface B { attribute long x; };\nA implements B;  // B::x would clash with A::x\n\ninterface C { attribute long y; };\ninterface D { attribute long y; };\ninterface E : D { };\nC implements E;  // D::y would clash with C::y\n\ninterface F { };\ninterface H { attribute long z; };\ninterface I { attribute long z; };\nF implements H;\nF implements I;  // H::z and I::z would clash when mixed in to F","interface Entry {\n  readonly attribute unsigned short entryType;\n  // ...\n};\n\ninterface Observable {\n  void addEventListener(DOMString type,\n                        EventListener listener,\n                        boolean useCapture);\n  // ...\n};\n\nEntry implements Observable;","interface MyConstants {\n  const boolean? ARE_WE_THERE_YET = false;\n};","interface Node {\n  readonly attribute DOMString? namespaceURI;\n  readonly attribute Node? parentNode;\n  // ...\n};","interface Canvas {\n\n  sequence<DOMString> getSupportedImageCodecs();\n\n  void drawPolygon(sequence<float> coordinates);\n  sequence<float> getLastDrawnPolygon();\n\n  // ...\n};","[Constructor]\ninterface LotteryResults {\n  readonly attribute unsigned short[] numbers;\n};","[Constructor]\ninterface LotteryResults {\n  attribute unsigned short[] numbers;\n};","[ArrayClass]\ninterface ItemList {\n  attribute unsigned long length;\n  getter object getItem(unsigned long index);\n  creator setter object setItem(unsigned long index, object item);\n  deleter void removeItem(unsigned long index);\n};\n\n[ArrayClass]\ninterface ImmutableItemList {\n  readonly attribute unsigned long length;\n  getter object getItem(unsigned long index);\n};","interface GraphicsContext {\n  void setColor(octet red, octet green, octet blue);\n  void setColorClamped([Clamp] octet red, [Clamp] octet green, [Clamp] octet blue);\n};","interface NodeList {\n  Node item(unsigned long index);\n  readonly attribute unsigned long length;\n};\n\n[Constructor,\n Constructor(float radius)]\ninterface Circle {\n  attribute float r;\n  attribute float cx;\n  attribute float cy;\n  readonly attribute float circumference;\n};","interface GraphicsContext {\n  void setColor(octet red, octet green, octet blue);\n  void setColorEnforcedRange([EnforceRange] octet red, [EnforceRange] octet green, [EnforceRange] octet blue);\n};","[ImplicitThis]\ninterface Window {\n  ...\n  attribute DOMString name;\n  void alert(DOMString message);\n};","interface Example {\n  [LenientThis] attribute DOMString x;\n  attribute DOMString y;\n};","[NamedConstructor=Audio,\n NamedConstructor=Audio(DOMString src)]\ninterface HTMLAudioElement : HTMLMediaElement {\n  // ...\n};","interface Storage {\n  void addEntry(unsigned long key, any value);\n};\n\n[NoInterfaceObject]\ninterface Query {\n  any lookupEntry(unsigned long key);\n};","interface StringMap {\n  readonly attribute unsigned long length;\n  getter DOMString lookup(DOMString key);\n};\n\n[OverrideBuiltins]\ninterface StringMap2 {\n  readonly attribute unsigned long length;\n  getter DOMString lookup(DOMString key);\n};","interface Name {\n  attribute DOMString full;\n  attribute DOMString family;\n  attribute DOMString given;\n};\n\ninterface Person {\n  [PutForwards=full] readonly attribute Name name;\n  attribute unsigned short age;\n};","interface Counter {\n  [Replaceable] readonly attribute unsigned long value;\n  void increment();\n};","[NamedPropertiesObject]\ninterface Window {\n  getter any (DOMString name);\n  // ...\n};","[TreatNonCallableAsNull]\ncallback OccurrenceHandler = void (DOMString details);\n\ncallback ErrorHandler = void (DOMString details);\n\ninterface Manager {\n  attribute OccurrenceHandler? handler1;\n  attribute ErrorHandler? handler2;\n};","interface Dog {\n  attribute DOMString name;\n  [TreatNullAs=EmptyString] attribute DOMString owner;\n\n  boolean isMemberOfBreed([TreatNullAs=EmptyString] DOMString breedName);\n};","interface Cat {\n  attribute DOMString name;\n  [TreatUndefinedAs=Null] attribute DOMString? owner;\n\n  boolean isMemberOfBreed([TreatUndefinedAs=EmptyString] DOMString breedName);\n};","interface A {\n  [Unforgeable] readonly attribute DOMString key;\n};\n\ninterface B : A { };","interface System {\n  [Unforgeable] readonly attribute DOMString username;\n  readonly attribute Date loginTime; \n};","[NoInterfaceObject]\ninterface Foo {\n};\n\npartial interface Window {\n  attribute Foo foo;\n};","exception NumberError { };\n\ninterface A {\n\n  /**\n   * Calls computeSquareRoot on m, passing x as its argument.\n   */\n  float doComputation(MathUtils m, float x);\n};\n\ninterface MathUtils {\n  /**\n   * If x is negative, throws a NumberError exception.  Otherwise, returns\n   * the square root of x.\n   */\n  float computeSquareRoot(float x);\n};","interface Dahut {\n  attribute DOMString type;\n};\n\nexception SomeException {\n};\n\ninterface ExceptionThrower {\n  // This attribute always throws a SomeException and never returns a value.\n  attribute long valueOf;\n};","typedef unsigned long long DOMTimeStamp;","callback Function = any (any... arguments);","callback VoidFunction = void ();"];

var tests = JSON.parse(fs.readFileSync(__dirname + "/build/tests.json")).tests;

tests.forEach(function(testCase) {
   exports[testCase.name] = function(test) {
       test.expect(1);
       var idl =  Parser.parser.parse(testCase.idl);
       test.deepEqual(idl, testCase.expected);
       test.done();
   };
});
