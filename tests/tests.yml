presets:
  definition: &definition
    definition: null
    name: null
    inherits: null
    members: []
    attributes: []
  interface: &interface
    <<: *definition
    definition: interface
    callback: false
  exception: &exception
    <<: *definition
    definition: exception
  dictionary: &dictionary
    <<: *definition
    definition: dictionary
  typedef: &typedef
    definition: typedef
    attributes: []
  attribute: &attribute
    readOnly: false
    memberType: attribute
    type: null
    name: null
    inherit: false
  dictionaryMember: &dictionaryMember
    memberType: dictionaryMember
    value: null
  const: &const
    memberType: const
    value: null
  operation: &operation
    memberType: operation
    returnType: null
    arguments: []
    specials: []

tests:
  - name: Interfaces(1)
    idl: |
         [Constructor]
         interface GraphicalWindow {
           readonly attribute unsigned long width;
           readonly attribute unsigned long height;

           attribute Paint currentPaint;

           void drawRectangle(float x, float y, float width, float height);

           void drawText(float x, float y, DOMString text);
         };
    expected:
      - <<: *interface
        name: GraphicalWindow
        attributes:
          - Constructor
        members:
          - <<: *attribute
            name: width
            type: &unsignedLong
              name: unsigned long
              suffix: &emptySuffix
                array: false
                nullable: false
            readOnly: true
          - <<: *attribute
            name: height
            type: *unsignedLong
            readOnly: true
          - <<: *attribute
            name: currentPaint
            type:
              name: Paint
              suffix: *emptySuffix
          - <<: *operation
            name: drawRectangle
            arguments:
              - type: &float
                  name: float
                  suffix: *emptySuffix
                name: x
              - type: *float
                name: y
              - type: *float
                name: width
              - type: *float
                name: height
          - <<: *operation
            name: drawText
            arguments:
              - type: *float
                name: x
              - type: *float
                name: y
              - type: &DOMString
                  name: DOMString
                  suffix: *emptySuffix
                name: text
  - name: Interfaces(2)
    idl: |
         exception GraphicsException {
           DOMString reason;
         };

         interface Paint { };

         interface SolidColor : Paint {
           attribute float red;
           attribute float green;
           attribute float blue;
         };
    expected:
      - <<: *exception
        name: GraphicsException
        members:
          - {type: *DOMString, name: reason, memberType: field}
      - <<: *interface
        name: Paint
      - <<: *interface
        name: SolidColor
        inherits: Paint
        members:
          - <<: *attribute
            type: *float
            name: red
          - <<: *attribute
            type: *float
            name: green
          - <<: *attribute
            type: *float
            name: blue
  - name: Interfaces(3)
    idl: |
         interface System {

           // Operation identifier:          "createObject"
           // Operation argument identifier: "interface"
           object createObject(DOMString _interface);

           // Operation argument identifier: "interface"
           object[] createObjectArray(DOMString interface);

           // Operation has no identifier; it declares a getter.
           getter DOMString (DOMString keyName);
         };
    expected:
      - <<: *interface
        name: System
        members:
          - <<: *operation
            name: createObject
            arguments: [{type: *DOMString, name: _interface}]
            returnType: &object
              name: object
              suffix: *emptySuffix
          - <<: *operation
            name: createObjectArray
            arguments: [{type: *DOMString, name: interface}]
            returnType: {name: object, suffix: {array: true, nullable: false}}
          - <<: *operation
            name: null
            specials: [getter]
            arguments: [{type: *DOMString, name: keyName}]
            returnType: *DOMString
  - name: typedef
    idl: |
         typedef long[] ArrayOfLongs;
    expected:
      - <<: *typedef
        type:
            name: long
            suffix: {array: true, nullable: false}
        name: ArrayOfLongs
  - name: Using typedef
    idl: |
         interface B : A {
           void f(ArrayOfLongs x);
         };
    expected:
      - <<: *interface
        name: B
        inherits: A
        members:
          - <<: *operation
            name: f
            arguments:
              - name: x
                type:
                  name: ArrayOfLongs
                  suffix: *emptySuffix
  - name: Exceptions(1)
    idl: |
          exception FrameworkException {

            // Constant identifier: "ERR_NOT_FOUND"
            const long ERR_NOT_FOUND = 1;

            // Exception field identifier: "code"
            long code;
          };
    expected:
      - <<: *exception
        name: FrameworkException
        members:
          - memberType: const
            type: &long
              name: long
              suffix: *emptySuffix
            name: ERR_NOT_FOUND
            value: 1
          - memberType: field
            type: *long
            name: code
  - name: Interfaces(4)
    idl: |
         interface TextField {

           // Attribute identifier: "const"
           attribute boolean _const;

           // Attribute identifier: "value"
           attribute DOMString? _value;
         };
    expected:
      - <<: *interface
        name: TextField
        members:
          - <<: *attribute
            name: _const
            type: &boolean
              name: boolean
              suffix: *emptySuffix
          - <<: *attribute
            name: _value
            type: &DOMString?
              name: DOMString
              suffix: &nullable
                array: false
                nullable: true
  - name: Callback interface
    idl: |
         callback interface Options {
           attribute DOMString? option1;
           attribute DOMString? option2;
           attribute long? option3;
         };
    expected:
      - <<: *interface
        name: Options
        callback: true
        members:
          - <<: *attribute
            name: option1
            type: *DOMString?
          - <<: *attribute
            name: option2
            type: *DOMString?
          - <<: *attribute
            name: option3
            type: &long?
              name: long
              suffix: *nullable
  - name: Dictionaries
    idl: |
         dictionary Options {
           DOMString? option1;
           DOMString? option2;
           long? option3;
         };

         interface A {
           void doTask(DOMString type, Options options);
         };
    expected:
      - <<: *dictionary
        name: Options
        members:
          - <<: *dictionaryMember
            name: option1
            type: *DOMString?
          - <<: *dictionaryMember
            name: option2
            type: *DOMString?
          - <<: *dictionaryMember
            name: option3
            type: *long?
      - <<: *interface
        name: A
        members:
          - <<: *operation
            name: doTask
            arguments: [{type: *DOMString, name: type}, {type: {name: Options, suffix: *emptySuffix}, name: options}]
  - name: Referential interfaces
    idl: |
         interface Animal {
           attribute DOMString name;
         };

         interface Human : Animal {
           attribute Dog? pet;
         };

         interface Dog : Animal {
           attribute Human? owner;
         };
    expected:
      - <<: *interface
        name: Animal
        members:
          - <<: *attribute
            name: name
            type: *DOMString
      - <<: *interface
        name: Human
        inherits: Animal
        members:
          - <<: *attribute
            name: pet
            type: {name: Dog, suffix: *nullable}
      - <<: *interface
        name: Dog
        inherits: Animal
        members:
          - <<: *attribute
            name: owner
            type: {name: Human, suffix: *nullable}
  - name: DOM Interfaces
    idl: |
         interface Node {
           readonly attribute DOMString nodeName;
           readonly attribute Node? parentNode;
           Node appendChild(Node newChild);
           void addEventListener(DOMString type, EventListener listener);
         };

         callback interface EventListener {
           void handleEvent(Event event);
         };
    expected:
      - <<: *interface
        name: Node
        members:
          - <<: *attribute
            name: nodeName
            type: *DOMString
            readOnly: true
          - <<: *attribute
            name: parentNode
            type: {name: Node, suffix: *nullable}
            readOnly: true
          - <<: *operation
            name: appendChild
            returnType: &Node
              name: Node
              suffix: *emptySuffix
            arguments: [{name: newChild, type: *Node}]
          - <<: *operation
            name: addEventListener
            arguments: [{name: type, type: *DOMString}, {name: listener, type: {name: EventListener, suffix: *emptySuffix}}]
      - <<: *interface
        name: EventListener
        callback: true
        members:
          - <<: *operation
            name: handleEvent
            arguments: [{name: event, type: {name: Event, suffix: *emptySuffix}}]
  - name: Interface constants
    idl: |
         // [26][27][28][29][63][64][65][66][67][68]
         interface constants {
           const long a = 1;
           const unsigned long b = 2;
           const short c = 3;
           const unsigned short d = 4;
           const float e = 5.0;
           const unrestricted float g = 5.5;
           const double h = -Infinity;
           const unrestricted double i = Infinity;
           const boolean j = true;
           const boolean k = false;
           const byte l = 5;
           const octet m = 6;
           const Something n = null;
         };
    expected:
      - <<: *interface
        name: constants
        members:
          - <<: *const
            name: a
            type: *long
            value: 1
          - <<: *const
            name: b
            type: *unsignedLong
            value: 2
          - <<: *const
            name: c
            type: &short
              name: short
              suffix: *emptySuffix
            value: 3
          - <<: *const
            name: d
            type: &unsignedShort
              name: unsigned short
              suffix: *emptySuffix
            value: 4
          - <<: *const
            name: e
            type: &float
              name: float
              suffix: *emptySuffix
            value: 5
          - <<: *const
            name: g
            type: &unrestrictedFloat
              name: unrestricted float
              suffix: *emptySuffix
            value: 5.5
          - <<: *const
            name: h
            type: &double
              name: double
              suffix: *emptySuffix
            value: -.inf
          - <<: *const
            name: i
            type: &unrestrictedDouble
              name: unrestricted double
              suffix: *emptySuffix
            value: .inf
          - <<: *const
            name: j
            type: &boolean
              name: boolean
              suffix: *emptySuffix
            value: true
          - <<: *const
            name: k
            type: *boolean
            value: false
          - <<: *const
            name: l
            type: &byte
              name: byte
              suffix: *emptySuffix
            value: 5
          - <<: *const
            name: m
            type: &octet
              name: octet
              suffix: *emptySuffix
            value: 6
          - <<: *const
            name: n
            type:
              name: Something
              suffix: *emptySuffix
            value: null
